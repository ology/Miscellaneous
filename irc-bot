#!/usr/bin/env perl

# Sample config (irc-bot.yml):
#
# nick: 'foobot'
# user: 'Your Name Bot'
# channel: '##somechan'
# server: 'chat.host.net:6667'

use strict;
use warnings;

use Data::Dumper::Compact qw(ddc);
use Mojo::IRC;
use YAML::XS qw(LoadFile);
use Music::Scales qw(get_scale_notes);
use App::MusicTools; # <- Needed for `vov`
use Music::Chord::Namer qw(chordname);
use Music::Chord::Note;
use Music::Note::Frequency;

# Use my local libraries
use lib map { "$ENV{HOME}/sandbox/$_/lib" } qw(Music-Duration-Partition);
use Music::Duration::Partition;

use constant OPTIONS => { max_width => 120 };

my $conf = LoadFile("$0.yml");

my $irc = Mojo::IRC->new(
  nick => $conf->{nick},
  user => $conf->{user},
  server => $conf->{server},
  tls => {},
);

$irc->on(irc_join => sub {
  my($self, $message) = @_;
  print "SUCCESS: $message->{params}[0] joined\n";
});

$irc->on(message => sub {
  my($self, $message) = @_;
});

$irc->on(irc_privmsg => sub {
  my($self, $message) = @_;
  if ($message && $message->{params}) {
    if ($message->{params}[1] =~ /^(\w+)[:,]\s*(.*)$/) {
      my $nick = $1;
      my $msg = $2;
      if ($nick eq $conf->{nick}) {
        print "$message->{prefix} said: $message->{params}[1]\n";
        my %enharmonic = (
          'C#' => 'Db',
          'D#' => 'Eb',
          'E#' => 'F',
          'F#' => 'Gb',
          'G#' => 'Ab',
          'A#' => 'Bb',
          'B#' => 'C',
        );
        if ($msg eq 'leave') {
          $irc->write(QUIT => 'oof');
          exit;
        }
        elsif ($msg eq 'help') {
          $irc->write(privmsg => $conf->{channel}, ':Address me with one of: [source|motif 3|vov I bII V/IV|notes C D# G A#|chord Cm7|freq 440 4] for example');
        }
        elsif ($msg eq 'source') {
          $irc->write(privmsg => $conf->{channel}, ':My guts are at https://github.com/ology/Miscellaneous/blob/master/irc-bot');
        }
        elsif ($msg =~ /^motif\s+([\d.]+)$/) {
          my $size = $1;
          my $mdp = Music::Duration::Partition->new(
              size => $size,
              pool => [qw(hn dqn qn den en sn)],
          );
          my $motif = $mdp->motif;
          my @scale = get_scale_notes('C');
          my $phrase = [ map { $scale[int rand @scale] . '.' . $_ } @$motif ];
          $irc->write(privmsg => $conf->{channel}, ':' . "$size beats: " . ddc($phrase, OPTIONS));
        }
        elsif ($msg =~ /^vov\s+([\w \/]+)$/) {
          my @args = split /\s+/, $1;
          my @parts;
          for my $arg (@args) {
            my $vov = qx{ vov $arg };
            chomp $vov;
            $vov = uc $vov;
            $vov =~ s/([A-G])IS/$enharmonic{ $1 . '#' }/g
              if $arg =~ /b/;
            $vov =~ s/IS/#/g;
            push @parts, $vov;
          }
          my $flattened = join '|', @parts;
          $irc->write(privmsg => $conf->{channel}, ":$flattened");
        }
        elsif ($msg =~ /^notes\s+(.+)$/) {
          my $arg = $1;
          my @notes = split /\s+/, $arg;
          my $chord = chordname(@notes);
          $chord =~ s/([A-G]#)(.*)$/$enharmonic{$1}$2/g
            if $arg =~ /b/;
          $irc->write(privmsg => $conf->{channel}, ":Chord: $chord");
        }
        elsif ($msg =~ /^chord\s+(.+)$/) {
          my $arg = $1;
          my $cn = Music::Chord::Note->new;
          my @notes = $cn->chord($arg);
          if ($arg =~ /b/) {
            for (@notes) {
              s/^([A-G]#)$/$enharmonic{$1}/;
            }
          }
          $irc->write(privmsg => $conf->{channel}, ":Notes: @notes");
        }
        elsif ($msg =~ /^freq\s+([\w.]+)\s*(\d+)?$/) {
          my $freq = $1;
          my $num = $2 || 4;
          if ($freq =~ /[A-G]/) {
            my $note = Music::Note::Frequency->new($freq);
            $freq = $note->frequency;
          }
          my $freqs = [ map { sprintf '%.2f', $_ * $freq } 1 .. $num ];
          $irc->write(privmsg => $conf->{channel}, ":Harmonics: " . ddc($freqs, OPTIONS));
        }
        else {
          (my $you = $message->{prefix}) =~ s/^(.+?)!.*$/$1/;
          $irc->write(privmsg => $conf->{channel}, qq|:You said, "$msg" $you|);
        }
      }
    }
  }
});

$irc->connect(sub {
  my($irc, $err) = @_;
  return warn $err if $err;
  $irc->write(join => $conf->{channel});
});

Mojo::IOLoop->start;
