#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use MealMaster;

my $file;
my $title;
my $category;
my $ingredient;
GetOptions(
    'file=s'        => \$file,
    'title=s@'      => \$title,
    'category=s@'   => \$category,
    'ingredient=s@' => \$ingredient,
) or die "Error in command line arguments\n";;

my $mm = MealMaster->new();

my @mm_recipes = $mm->parse($file);

my @recipes;
for my $recipe ( @mm_recipes ) {
    if ( $title && @$title ) {
        for my $t ( @$title ) {
            if ( $recipe->title =~ /$t/i ) {
                push @recipes, $recipe;
            }
        }
    }
    else {
        push @recipes, $recipe;
    }
}

my $i = 0;

RECIPE: for my $recipe ( @recipes ) {
    if ( $category && @$category ) {
        for my $c ( @$category ) {
            next RECIPE unless grep { $_ =~ /$c/i } @{ $recipe->categories };
        }
    }
    if ( $ingredient && @$ingredient ) {
        for my $i ( @$ingredient ) {
            next RECIPE unless grep { $_->product =~ /$i/i } @{ $recipe->ingredients };
        }
    }

    printf "%d. %s\n", ++$i, ucfirst( lc( $recipe->title ) );
    printf "\tCategories: %s\n", join( ', ', sort @{ $recipe->categories } );
    printf "\tYield: %s\n", $recipe->yield;
    print "\tIngredients:\n";
    for my $i ( @{ $recipe->ingredients} ) {
        printf "\t\t%s %s %s\n", $i->quantity, $i->measure, $i->product;
    }
}
