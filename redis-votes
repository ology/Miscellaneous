#!/usr/bin/env perl
use strict;
use warnings;

# This is a variation of the first example of "Redis In Action" translated from python to Mojo::Redis2 perl, beginning at:
# https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-3-hello-redis/1-3-1-voting-on-articles/

use Mojo::Redis2;

my $ONE_DAY    = 86400;
my $ONE_WEEK   = 7 * $ONE_DAY;
my $VOTE_SCORE = 432;
my $PER_PAGE   = 25;

# Either have the redis server running (`redis-server /usr/local/etc/redis.conf`)
# or uncomment this line:
Mojo::Redis2::Server->start;

my $redis = Mojo::Redis2->new;

# Say hello!
$redis->on(connection => sub { my ($self, $info) = @_; print "HELLO!\n" });

# Remove the keys created by this program
flush_keys($redis);

# Populate with keys used by this program
populate($redis);

my $id = post_article( $redis, 'user:6', 'Foo!', 'http://ology.net/' );

article_vote( $redis, 'user:1', "article:$id" );
article_vote( $redis, 'user:6', 'article:1' );
article_vote( $redis, 'user:1', 'article:2', -1 );
article_vote( $redis, 'user:1', 'article:3' ); # Voting expired for this article

add_remove_groups( $redis, 1, [qw/programming/] );
add_remove_groups( $redis, 1, [qw/programming/] ); # Key already in group
add_remove_groups( $redis, 2, [qw/programming/] );
add_remove_groups( $redis, $id, [qw/programming/] );
add_remove_groups( $redis, 1, [], [qw/programming/] );
add_remove_groups( $redis, 3, [], [qw/programming/] ); # Key not in group

#my @articles = get_articles($redis);
my @articles = get_group_articles( $redis, 'programming' );
use Data::Dumper; print Dumper \@articles;

sub flush_keys {
    my ($conn) = @_;
    for my $key (qw/
        article:
        article:1
        article:2
        article:4
        group:programming
        score:
        time:
        user:
        voted:1
        voted:2
        voted:4
    /) {
        $conn->del($key);
    }
}

sub populate {
    my ($conn) = @_;

    for ( 1 .. 3 ) {
        my $id = $conn->incr('article:');
        my $stamp = $id == 3 ? time - 8 * $ONE_DAY : time - $ONE_DAY;
        $conn->zadd( 'time:', $stamp, "article:$id" );
        $conn->zadd( 'score:', $VOTE_SCORE, "article:$id" );
    }

    # All users vote for article 1
    for ( 1 .. 5 ) {
        my $id = $conn->incr('user:');
        $conn->sadd( 'voted:1', "user:$id" );
    }
}

sub article_vote {
    my ( $conn, $user, $article, $direction ) = @_;

    $direction ||= 1;

    my $cutoff = time - $ONE_WEEK;

    # Can the article still be voted on?
    if ( $conn->zscore( 'time:', $article ) < $cutoff ) {
        warn "Article voting cutoff time reached for $user, $article\n";
        return;
    }

    my $article_id = [ split /:/, $article ]->[-1];

    if ( $conn->sadd( 'voted:' . $article_id, $user ) ) {
        if ( $direction == 1 ) {
            $conn->zincrby( 'score:', $VOTE_SCORE, $article );
            $conn->hincrby( $article, 'votes', 1 );
        }
        else {
            $conn->zincrby( 'score:', -$VOTE_SCORE, $article );
            $conn->hincrby( $article, 'votes', -1 );
        }
    }
    else {
        warn "User already voted\n";
    }
}

sub post_article {
    my ( $conn, $user, $title, $link ) = @_;

    my $article_id = $conn->incr('article:');

    my $voted = 'voted:' . $article_id;
    $conn->sadd( $voted, $user );
    $conn->expire( $voted, $ONE_WEEK );

    my $now = time;

    my $article = 'article:' . $article_id;

    $conn->hmset( $article, (
        title  => $title,
        link   => $link,
        poster => $user,
        time   => $now,
        votes  => 1,
    ));

    $conn->zadd( 'score:', $now + $VOTE_SCORE, $article );
    $conn->zadd( 'time:', $now, $article );

    return $article_id;
}

sub get_articles {
    my ( $conn, $page, $order ) = @_;

    $page  ||= 1;
    $order ||= 'score:';

    my $start = ($page - 1) * $PER_PAGE;
    my $end   = $start + $PER_PAGE - 1;

    my $ids = $conn->zrevrange( $order, $start, $end );

    my @articles;

    for my $id ( @$ids ) {
        my %article_data = @{ $conn->hgetall($id) };
        $article_data{id} = $id;
        push @articles, \%article_data;
    }

    return @articles;
}

sub add_remove_groups {
    my ( $conn, $article_id, $to_add, $to_remove ) = @_;

    my $article = 'article:' . $article_id;

    # NOTE sadd and srem do not error if the member is present or not.
    # I just use ->sismember to improve the user experience.

    for my $group ( @$to_add ) {
        my $set = 'group:' . $group;
        if ( $conn->sismember( $set, $article ) ) {
            warn "Article $article is already a member of $set\n";
        }
        else {
            $conn->sadd( $set, $article );
        }
    }

    for my $group ( @$to_remove ) {
        my $set = 'group:' . $group;
        if ( $conn->sismember( $set, $article ) ) {
            $conn->srem( $set, $article );
        }
        else {
            warn "Article $article is not a member of $set\n";
        }
    }
}

sub get_group_articles {
    my ( $conn, $group, $page, $order ) = @_;

    $page  ||= 1;
    $order ||= 'score:';

    my $key = $order . $group;

    if ( not $conn->exists($key) ) {
        my @keys = ( 'group:' . $group, $order );
        $conn->zinterstore( $key, scalar(@keys), @keys, 'AGGREGATE' => 'MAX' );
        $conn->expire( $key, 60 );
    }

    return get_articles( $conn, $page, $key );
}
