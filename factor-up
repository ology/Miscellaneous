#!/usr/bin/env perl
use strict;
use warnings;

my $seconds = shift || "Usage: perl $0 seconds convert_char\n";
my $convert = shift || 'Y';
my $use_wks = shift // 0;
my $use_qtr = shift // 0;

my $minutes  = 60; # seconds
my $hours    = 60; # minutes
my $days     = 24; # hours
my $weeks    = 7;  # days
my $months   = $use_wks ? 4 : 30;  # weeks or days
my $quarters = 3;  # months
my $years    = $use_qtr ? 4 : 12;  # quarters or months

my $s = 0;
my $m = 0;
my $h = 0;
my $d = 0;
my $w = 0;
my $M = 0;
my $Q = 0;
my $Y = 0;

print "$seconds s\n";
if ( $seconds >= $minutes ) {
    ( $m, $s ) = int_rem( $seconds, $minutes );
}
print "$m m $s s\n";
exit if $convert eq 'm';

if ( $m >= $hours ) {
    ( $h, $m ) = int_rem( $m, $hours );
}
print "$h h $m m $s s\n";
exit if $convert eq 'h';

if ( $h >= $days ) {
    ( $d, $h ) = int_rem( $h, $days );
}
print "$d d $h h $m m $s s\n";
exit if $convert eq 'd';

if ( $use_wks ) {
    if ( $d >= $weeks ) {
        ( $w, $d ) = int_rem( $d, $weeks );
    }
    print "$w w $d d $h h $m m $s s\n";
    exit if $convert eq 'w';

    if ( $w >= $months ) {
        ( $M, $w ) = int_rem( $w, $months );
    }
    print "$M M $w w $d d $h h $m m $s s\n";
    exit if $convert eq 'M';
}
else {
    if ( $d >= $months ) {
        ( $M, $d ) = int_rem( $d, $months );
    }
    print "$M M $d d $h h $m m $s s\n";
    exit if $convert eq 'M';
}

if ( $use_qtr ) {
    if ( $M >= $quarters ) {
        ( $Q, $M ) = int_rem( $M, $quarters );
    }
    print "$Q Q $M M $w w $d d $h h $m m $s s\n";
    exit if $convert eq 'Q';

    if ( $Q >= $years ) {
        ( $Y, $Q ) = int_rem( $Q, $years );
    }
    print "$Y Y $Q Q $M M $w w $d d $h h $m m $s s\n";
    exit if $convert eq 'Y';
}
else {
    if ( $M >= $years ) {
        ( $Y, $M ) = int_rem( $M, $years );
    }
    print "$Y Y $M M $w w $d d $h h $m m $s s\n";
    exit if $convert eq 'Y';
}

sub int_rem {
    my ( $frame, $factor ) = @_;

    my $integer = int $frame / $factor;

    my $remainder = $frame % $factor;

    return $integer, $remainder;
}
