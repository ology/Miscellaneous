#!/usr/bin/env perl

# https://github.com/mojolicious/mojo/wiki/Writing-websocket-chat-using-Mojolicious-Lite
# +
# http://blogs.perl.org/users/joel_berger/2012/10/a-websocket-mojoliciousdbi-example.html

use Mojolicious::Lite;
use Mojo::JSON qw(decode_json encode_json);
use DBI;

# Connected websocket clients
my $clients = {};

# add helper methods for interacting with the database
my $dbfile = 'database.db';
helper db => sub { state $dbh = DBI->connect("dbi:SQLite:$dbfile", '', '') };

helper create_table => sub {
  my $self = shift;
  $self->app->log->info("Creating table 'people'");
  $self->db->do('CREATE TABLE people (id integer primary key autoincrement, name text, age int);');
};

helper select => sub {
  my $self = shift;
  my $sth = eval { $self->db->prepare('SELECT * FROM people') } || return undef;
  $sth->execute;
  return $sth->fetchall_arrayref;
};

helper insert => sub {
  my $self = shift;
  my ($name, $age) = @_;
  my $sth = eval { $self->db->prepare('INSERT INTO people (name, age) VALUES (?,?)') } || return undef;
  $sth->execute($name, $age);
  return $self->db->last_insert_id;
};

helper delete => sub {
  my $self = shift;
  my ($id) = @_;
  $self->app->log->info("Deleting $id from 'people'");
  my $sth = eval { $self->db->prepare('DELETE FROM people WHERE id=?') } || return undef;
  $sth->execute($id);
};

# setup base route
get '/' => sub {
  my $self = shift;

  my $rows = $self->select;
  $self->render('index', rows => $rows);
} => 'index';

post '/' => sub {
  my $self = shift;
  my $id = $self->param('delete');

  if ($id) {
    $self->delete($id);
  }

  $self->redirect_to('index');
} => 'action';

# setup websocket message handler
websocket '/insert' => sub {
  my $self = shift;

  # Get this client id
  app->log->debug(sprintf 'Client connected: %s', $self->tx);
  my $id = sprintf '%s', $self->tx;
  $clients->{$id} = $self->tx;

  $self->on(message => sub {
    my ($ws, $message) = @_;

    my $row = decode_json($message);
    my $inserted = $self->insert(@$row);
    $row = [$inserted, @$row];

    my $html = $ws->render_to_string('table', rows => [$row]);

    # Send the message to the connected clients
    for (keys %$clients) {
      $clients->{$_}->send(encode_json({row => $html}));
    }
  });
};

# create the people table if the database doesn't exist
app->create_table unless -e $dbfile;

app->start;

__DATA__

@@ index.html.ep

<!DOCTYPE html>
<html>
<head>
  <title>People</title>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
</head>
<body>
  <div>
    Name: <input type="text" id="name"> 
    Age: <input type="text" id="age" > 
    <input type="submit" value="Add" id="insert">
  </div>
  <br>
  Data: <br>
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Age</th>
      </tr>
    </thead>
    <tbody id="table">
      %= include 'table'
    </tbody>
  </table>
  %= javascript begin
$(document).ready(function() {
    var ws = new WebSocket("<%= url_for('insert')->to_abs %>");
    ws.onopen = function () {
      console.log('Connection opened!');
    };
    ws.onmessage = function (evt) {
      var data = JSON.parse(evt.data);
      $('#table').append(data.row);
    };
    $("#insert").click(function () {
      var name = $('#name');
      var age = $('#age');
      if (name.val() && age.val()) {
        ws.send(JSON.stringify([name.val(),age.val()]));
        name.val('');
        age.val('');
      }
    });
});
  %= end
</body>
</html>

@@ table.html.ep

% for my $row (@$rows) {
  % my $counter = 0;
  % my $id = $row->[0];
  <tr>
  % for my $text (@$row) {
    % $counter++;
    <td><%= $text %></td>
  % }
  % if ($counter >= @$row) {
    <td><form method="post"><input type="hidden" name="delete" value="<%= $id %>"/><input type="submit" value="X"/></form></td>
  % }
  </tr>
% }
