#!/usr/bin/env perl
use strict;
use warnings;

use MealMaster;

my $file = shift || '/Users/gene/Documents/MealMaster-31000.mmf';

my $mm = MealMaster->new();

my @recipes = $mm->parse($file);
#my @recipes;
#for my $recipe ( @mm_recipes ) {
#    push @recipes, $recipe
#        if grep { $_->product =~ /cinnamon/i } @{ $recipe->ingredients };
#}

# Unit conversion dispatch table
my $units = {
    c  => sub { return ( $_[0] * 8, 'oz' ) },           # cup
    cn => sub { return ( $_[0] * 12, 'oz' ) },          # can
    dr => sub { return ( $_[0] * 0.0016907, 'oz' ) },   # drop
    ds => sub { return ( $_[0] * 0.03125, 'oz' ) },     # dash
    pn => sub { return ( $_[0] * 0.013, 'oz' ) },       # pinch
    tb => sub { return ( $_[0] * 0.5, 'oz' ) },         # tablespoon
    ts => sub { return ( $_[0] * 0.167, 'oz' ) },       # teaspoon
};

my $items = {};

# Sum quantities
for my $recipe ( @recipes ) {
    for my $ingredient ( @{ $recipe->ingredients } ) {
        my $quantity = $ingredient->quantity;
        $quantity =~ s/ /+/;
        $quantity = 1 unless $quantity;

        print $ingredient->product, ': ', $quantity, ' ', $ingredient->measure, "\n";

        $items->{ $ingredient->product }{ $ingredient->measure || 'ea' } += eval $quantity;
    }
}

my $list;

# Convert units
for my $item ( keys %$items ) {
    for my $measure ( keys %{ $items->{$item} } ) {
        if ( exists $units->{$measure} ) {
            my ( $q, $m ) = $units->{$measure}->( $items->{$item}{$measure} );
            $list->{$item}{$m} = $q;
        }
        else {
            $list->{$item}{$measure} = $items->{$item}{$measure};
        }
    }
}
use Data::Dumper;use Test::More;diag(__PACKAGE__,' L',__LINE__,'. MARK: ',Dumper$list);
