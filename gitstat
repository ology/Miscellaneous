#!/usr/bin/env perl
use strict;
use warnings;

# Loop over git repos and perform various operations on them.

use File::Find::Rule;
use IO::Prompt;

my $path = shift || $ENV{HOME} . '/sandbox';

my @repos = File::Find::Rule->maxdepth(1)->directory->in($path);

my $i = 0;

REPO: for my $repo ( sort @repos ) {
  chdir($repo) or die "Can't chdir $repo: $!";

  my $branch = qx{ git branch 2> /dev/null | grep -e '\* ' | sed 's/^..\(.*\)/ \1/' };
  chomp $branch;
  next unless $branch;

  $i++;

  $repo =~ s/^$path\///;

  while (1) {
    print "\n$i. $repo $branch\n";

    my $response = prompt 'Enter=next q=quit s=status b=branches p=pull f=prune m=master d=develop: ';

    if ($response eq 'q') {
      last REPO;
    }
    elsif ($response eq 's') {
      my $git = qx{ git status --untracked-files=no };
      $git =~ s/^On branch [\w\-\/]+//;
      $git =~ s/ *\(.+?\) *//gm;
      $git =~ s/\n+/\n/gm;
      print $git;
    }
    elsif ($response eq 'p') {
      my $git = qx{ git pull };
      print "\n$git";
    }
    elsif ($response eq 'm') {
      my $git = qx{ git checkout master };
      $branch = '* master';
      print "\n$git";
    }
    elsif ($response eq 'd') {
      my $git = qx{ git checkout develop };
      $branch = '* develop';
      print "\n$git";
    }
    elsif ($response eq 'b') {
      my $git = qx{ git branch -a };
      print "\n$git";
    }
    elsif ($response eq 'f') {
      my $git = qx{ git fetch --prune };
      $git =~ s/\n+/\n/gm;
      print $git;
    }
    else {
      next REPO;
    }
  }
}
