#!/usr/bin/env perl
use strict;
use warnings;

# Loop over git repos and perform various operations on them.

use File::Find::Rule;
use IO::Prompt;
use List::Util 'any';

my $path = shift || $ENV{HOME} . '/sandbox';

my @repos = File::Find::Rule
    ->maxdepth(1)
    ->directory
    ->not(File::Find::Rule->new->name(qr/^\./)) # Skip .dot dirs
    ->in($path);

my $i = 0;

REPO: for my $repo ( sort @repos ) {
  chdir($repo) or die "Can't chdir $repo: $!";

  $repo =~ s/^$path\///;

  my @subdirs = File::Find::Rule->maxdepth(1)->directory->in('.');
  my $bool = any { $_ eq '.git' } @subdirs;
  next unless $bool;

  my $branch = qx{ git rev-parse --abbrev-ref HEAD };
  chomp $branch;

  $i++;

  print "\n", '-' x 70;

  while (1) {
    print "\n\t$i. $repo $branch\n";

    my $response = prompt 'Enter=next q=quit s=status b=branches p=pull f=prune: ';

    if ($response eq 'q') {
      last REPO;
    }
    elsif ($response eq 's') {
      my $git = qx{ git status --untracked-files=no };
      $git =~ s/^On branch [\w\-\/]+//;
      $git =~ s/\s*\(.+?\)//gm;
      $git =~ s/\n+/\n/gm;
      print $git;
      $git = qx{ git log -1 --format=%cd };
      print "\nLast commit on $git";
    }
    elsif ($response eq 'p') {
      my $git = qx{ git pull };
      print "\n$git";
    }
    elsif ($response eq 'b') {
      my $git = qx{ git branch -a };
      print "\n$git";
    }
    elsif ($response eq 'f') {
      my $git = qx{ git fetch --prune };
      $git =~ s/\n+/\n/gm;
      print $git;
    }
    else {
      next REPO;
    }
  }
}
