#!/usr/bin/env perl
use strict;
use warnings;

use DateTime::Format::Natural;
use File::Basename qw(dirname);
use Getopt::Long qw(GetOptions);
use Path::Tiny qw(path);
use Pod::Usage qw(pod2usage);
use Time::Piece;

pod2usage(1) unless @ARGV;

my $who = "Gene Boggs'";

my $t = localtime;

my %opts = (
    log     => './work-log-' . $t->year . sprintf('%02d', $t->mon) . '.txt',
    project => undef,
    begin   => 0,
    end     => 0,
    task    => undef,
    summary => 0,
    current => 0,
    open    => 0,
);
GetOptions(
    \%opts, 
    'log=s',
    'project=s',
    'begin',
    'end',
    'task=s',
    'summary',
    'current',
    'open',
    'help|?',
    'man',
    'verbose!',
) or pod2usage(2);

pod2usage(1) if $opts{help};
pod2usage(-exitval => 0, -verbose => 2) if $opts{man};

# Convert ~
$opts{log} = path($opts{log});

# Create the worklog file if it doesn't exist
unless (-e $opts{log}) {
    open my $fh, '>', $opts{log} or die "Can't create $opts{log}: $!";
    my $dir = path(dirname($opts{log}))->absolute;
    my @parts = split /\//, $dir;
    $dir = $parts[-1];
    print $fh "# $who $dir worklog\n\n";
    close $fh or die "Can't close $opts{log}: $!";
}

if ($opts{open}) {
    my $editor = $ENV{EDITOR} || 'vim';
    system($editor => $opts{log}) == 0
        or die "Failed to open $opts{log}: $?";
}
# Display the current project, time and task
elsif ($opts{current}) {
    my $project;
    my $task;
    my $datetime;
    my $dt_num = 0;

    open my $fh, '<', $opts{log} or die "Can't read $opts{log}: $!";

    while (my $line = readline($fh)) {
        next if $line =~ /^#/;
        chomp $line;
        next unless $line;

        if ($line =~ /^Project: (.+)$/) {
            $project = $1;
        }
        elsif ($line =~ /^([A-Z].+)$/) { # Date-time line
            $datetime = $1;
            if ($dt_num) {
                $dt_num = 0;
                $datetime = '';
            }
            else {
                $dt_num++;
            }
        }
        else {
            $task = $line;
        }
    }

    close $fh or die "Can't close $opts{log}: $!";

    $task =~ s/^\s+-\s+(.*)$/$1/;

    print "Project: $project\n";
    print "Date-time: $datetime\n" if $datetime;
    print "Task: $task\n" if $datetime;
}
# Summarize projects
elsif ($opts{summary}) {
    my %projects;
    my $project;
    my $datetime;
    my $start_date;
    my $end_date;

    open my $fh, '<', $opts{log} or die "Can't read $opts{log}: $!";

    my $parser = DateTime::Format::Natural->new;

    my $total = 0;
    my $n = 0;

    while (my $line = readline($fh)) {
        next if $line =~ /^#/;
        chomp $line;
        next unless $line;

        if ($line =~ /^Project: (.+)$/) {
            $project = $1;
            $projects{$project}->{order} = ++$n
                unless exists $projects{$project};
        }
        elsif ($line =~ /^([A-Z].+)$/) { # Date-time line
            my @parts = split /\s+/, $line;

            my $dt = $parser->parse_datetime("$parts[1] $parts[2], $parts[4] $parts[3]");

            if ($datetime) { # end date time
                $end_date = $datetime;
                my $minutes = ($dt->epoch - $datetime->epoch) / 60;
                $projects{$project}->{time} += $minutes;
                $total += $minutes;
                $datetime = '';
            }
            else { # begin date time
                $datetime = $dt;
            }

            # Capture the first timestamp
            $start_date = $datetime unless $start_date;
        }
    }

    close $fh or die "Can't close $opts{log}: $!";

    my $width = length keys %projects;

    for $project (sort { $projects{$a}->{order} <=> $projects{$b}->{order} } keys %projects) {
        printf "%*d. %.2f hrs - %s\n",
            $width,
            $projects{$project}->{order},
            $projects{$project}->{time} / 60,
            $project;
    }

    printf "Total: %.2f hours\n", $total / 60;
    printf "Start: %s\n", $start_date;
    printf "End:   %s\n", $end_date;
}
# Update log
elsif ($opts{project} || ($opts{begin} && $opts{task}) || $opts{task} || $opts{end}) {
    open my $fh, '>>', $opts{log} or die "Can't append to $opts{log}: $!";

    if ($opts{project}) {
        print $fh '#' . '=' x 69, "\n";
        print $fh "Project: $opts{project}\n";
        print $fh '#' . '=' x 69, "\n\n";
    }

    if (($opts{begin} && $opts{task}) || $opts{end}) {
        print $fh scalar(localtime), "\n";
        print $fh "\n" if $opts{end};
    }

    if ($opts{task}) {
        print $fh "  - $opts{task}\n";
    }

    print "$opts{log} updated\n";

    close $fh or die "Can't close $opts{log}: $!";
}
else {
    warn "Nothing to process.\n";
}

__END__

=head1 NAME

worklog

=head1 SYNOPSIS

  # Workflow in the project directory:
  > perl worklog --project=Foo --begin --task='Fix things'
  > perl worklog --task='Fix more stuff'
  > perl worklog --end
  > perl worklog --begin --task='Test'
  > perl worklog --current
  > perl worklog --end
  > perl worklog --summmary
  > perl worklog --open

  # Or given a --log file but using option abbreviations:
  > perl worklog -l=~/project/work-log-202101.txt -p=Foo -b -t='Fix things'
  > perl worklog -l=~/project/work-log-202101.txt -t='Fix more stuff'
  > perl worklog -l=~/project/work-log-202101.txt -e
  > perl worklog -l=~/project/work-log-202101.txt -b -t='Test'
  > perl worklog -l=~/project/work-log-202101.txt -c
  > perl worklog -l=~/project/work-log-202101.txt -e
  > perl worklog -l=~/project/work-log-202101.txt -s
  > perl worklog -l=~/project/work-log-202101.txt -o

=head1 DESCRIPTION

Log your work!

  #===================
  Project: Foo
  #===================

  Begin date 1
    - Fix things
    - Fix more stuff
  End date 1

  Begin date 2
    - Test
  End date 2

=head1 OPTIONS

=head2 log

The work B<log> text file

If no such file exists, one is created, and named
C<work-log-YYYYMM.txt>.  If no B<log> file is given, the program
assumes it is in the current directory.

=head2 project

The B<project> to be worked

=head2 task

A B<task> within a B<project>'s B<begin> and B<end> times

=head2 begin

The B<project> B<begin> time, which must be accompanied by a B<task>

=head2 end

The B<project> B<end> time

=head2 summary

Summarization of each B<project>'s hourly total and a grand total

=head2 current

Show the latest B<project>, and if it is in the middle of tasks, show
the date-time string and the latest B<task> being worked.

=head2 open

Open the worklog in the defined "EDITOR".

Default: C<vim>

=cut
