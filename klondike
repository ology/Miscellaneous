#!/usr/bin/env perl
use strict;
use warnings;

# Copyright 1999 Amir Karger (karger@post.harvard.edu)
# Modified Jun-2019 Gene Boggs

use Games::Cards;

srand();

my $Klondike;       # the game object
my $Save_Deck;      # $Deck is copied from this; used for restart
my $Deck;           # the deck we're using in the game
my %Foundations;    # the four piles we're trying to fill
my @Tableau;        # the table, where most of the play happens
my $Tableau_Size = 7;    # number of piles in tableau
my $Stock;               # cards in our hand
my $Waste;               # cards go from stock to waste
my $Cards_From_Stock = 3;    # how many stock cards to take at a time
my $Undo;                    # Games::Cards::Undo object
my $Error;                   # current error message

my $stats_file = '/tmp/klondike-stats.txt';
my $score = 0;

######################################################################
# SETUP THE GAME

my $class_prefix = "Games::Cards::";
my $class        = $class_prefix . "Game";
$Klondike = $class->new;

$class     = $class_prefix . "Deck";
$Save_Deck = $class->new( $Klondike, "Save Deck" );

New_Game();

######################################################################
# Now play

while (1)
{
    print_game();

    # If we got an error on the last turn, print the game status *first*,
    # then print the error right before the prompt (so that the reader will
    # see it)
    if ($Error) { print "$Error\n\n"; }

    # Ask player what to do
    print "Command (h for help): ";
    my $input = <STDIN>;
    chomp($input);
    $input =~ s/\s*//g;

    do_command($input);
}    #end while (loop over turns)

exit;

######################################################################
# Create the deck, columns, etc.
# Called with arg "restart" if we're restarting the same game (i.e. we
# don't want the deck shuffled)
sub setup_game
{
    my $restart = shift;

    my $class_prefix = "Games::Cards::";

    unless ($restart)
    {
        print "Shuffling the deck.\n";
        $Save_Deck->shuffle;
    }

    $Deck = $Save_Deck->clone( $Klondike, "Deck" );

    # Deal out the Tableau
    my $s = $class_prefix . "Stack";
    @Tableau = ();    # erase Tableau from last game, if any
    foreach my $i ( 1 .. $Tableau_Size )
    {
        my $column = $s->new( $Klondike, "Column $i", $i );
        $Deck->give_cards( $column, $i );

        # Make sure all columns are face down, with top card face-up
        $column->face_down;
        $column->top_card->face_up;
        push @Tableau, $column;
    }

    # Create the empty Foundations
    foreach ( @{ $Klondike->{ "suits" } } )
    {
        $Foundations{ $_ } = $s->new( $Klondike, ucfirst($_) . " Pile", lc $_ );
    }

    # Stock has what's left in the deck, wastepile starts out empty
    my $q = $class_prefix . "Queue";
    $Stock = $q->new( $Klondike, "Stock", "s" );
    $Deck->give_cards( $Stock, "all" );
    $Stock->face_down;

    $Waste = $s->new( $Klondike, "Waste", "w" );

    # Initialize the Undo engine with infinite size (no size arg. given to new)
    $Undo = new Games::Cards::Undo;
}    # end sub setup_game


sub do_command
{
    my $command = shift;
    $Error = "";
    for ($command)
    {
        # Move top card of the waste pile to a column OR move one or
        # more cards from a column to another column
        if (/^([w\d])(\d)$/i)
        {
            move_to_column( $1, $2 );
            $Undo->end_move;

            # Move a card to (correct) foundation from waste or from a column
        }
        elsif (/^([w\d])f$/i)
        {
            move_to_foundation($1);
            $Undo->end_move;
            check_win();

            # waste to stock
        }
        elsif (/^w$/i)
        {
            if ( $Stock->size )
            {
                $Error = "ERROR: Stock isn't empty yet";
                return;
            }
            $Waste->give_cards( $Stock, "all" );
            $Stock->face_down;
            $Undo->end_move;

            # stock to waste
        }
        elsif (/^sw?$/i)
        {
            my $size = $Stock->size
                or $Error = "ERROR: Stock is empty", return;
            my $number = ( $size < $Cards_From_Stock ) ? $size : $Cards_From_Stock;
            $Stock->give_cards( $Waste, $number );
            $Waste->face_up;    # really only need to face_up last $number cards
            $Undo->end_move;

            # finish the game?
        }
        elsif (/^z/i)
        {
            Finish();

            # restart
        }
        elsif (/^o/i)
        {
            New_Game("restart") if New_Game_Prompt();

            # undo
        }
        elsif (/^u/i)
        {
            Undo();

            # redo
        }
        elsif (/^r/i)
        {
            Redo();

            # help
        }
        elsif (/^h/i)
        {
            Help();

            # start a new game (abandon this one)
        }
        elsif (/^n/i)
        {
            New_Game() if New_Game_Prompt();

            # quit game
        }
        elsif (/^q/i)
        {
            Quit();

            # Handle some errors
        }
        elsif (/^.s/)
        {
            $Error = "You can only transfer from the waste pile to the stock";
        }
        elsif (/^.w/)
        {
            $Error = "You can only transfer to the waste pile from the stock";
        }
        else
        {
            $Error = "ERROR: unknown command";
        }    # end case if

    }    # end big case statement
}

######################################################################


sub move_to_column
{
    # Move a card from Stack arg0 to column arg1
    # Arg0 can be a column number or "w" for the waste pile
    # Return 1, or 0 for error
    my ( $from, $to ) = @_;
    my ( $donor, $receiver );

    # From which Stack are we taking cards?
    if ( $from =~ /w|\d/ )
    {
        $donor = $Klondike->get_cardset_by_nickname($from);
        die "illegal column $from in sub move_to_column\n" unless $donor;
    }
    else { die "Unknown first arg '$from' to sub move_to_column!\n"; }
    unless ( $donor->size ) { $Error = "ERROR: No cards to move"; return 0; }

    # To which Stack are we transferring cards?
    die "Unknown second arg '$to' to sub move!\n" unless $to =~ /\d/;
    $receiver = $Klondike->get_cardset_by_nickname($to);
    unless ($receiver) { $Error = "ERROR: Illegal column $to"; return 0; }

    # If we're going column to column, search through the (face-up cards
    # in the) column for the card that can legally move to the other column,
    # then transfer that card and all cards below it.
    #    If we're going from the waste pile to a column, just take the top card
    # and confirm that it's allowed to transfer
    my @cards;
    if ( $from =~ /\d/ )
    {
        # Reverse so that we go from the lowest number on the pile upward. This
        # allows us to count the number of cards we're transferring
        @cards = reverse( grep { $_->is_face_up } @{ $donor->cards } );
    }
    else
    {
        @cards = ( $donor->top_card );
    }

    my $allowed       = 0;                     # are we allowed to transfer?
    my $transferred   = 0;                     # number of cards to transfer
    my $receiver_card = $receiver->top_card;
    foreach my $card (@cards)
    {
        $transferred++;

        # card must be different color & next lower card
        # Or a king can go onto an empty column
        if ($receiver_card)
        {
            $allowed =
                ( $receiver_card->value == $card->value + 1 && $receiver_card->color ne $card->color );
        }
        else
        {
            $allowed = $card->name("long") eq "King";
        }

        last if $allowed;
    }

    unless ($allowed) { $Error = "ERROR: Illegal move"; return 0; }

    # Now actually transfer the card(s)
    $donor->give_cards( $receiver, $transferred );

    $score += 5 if $from eq 'w';

    # After removing a card from a column, make sure the next card in
    # that column is face up
    my $a;
    if ( $from =~ /\d/ && ( $a = $donor->top_card ) ) {
        $score += 5;
        $a->face_up;
    }

    return 1;
}    # end sub move_to_column


sub move_to_foundation
{
    # Move a card from arg0 to the correct foundation for that suit
    # Arg0 can be a column number or "w" for the waste pile
    #
    # Return 1, or 0 for error
    my ($from) = @_;
    my ( $donor, $receiver );

    # From which Stack are we taking cards?
    if ( $from =~ /w|\d/ )
    {
        $donor = $Klondike->get_cardset_by_nickname($from);
        die "illegal column $from in sub move_to_foundation\n" unless $donor;
    }
    else { warn "Unknown first arg '$from' to sub move_to_foundation!\n"; }
    unless ( $donor->size ) { $Error = "ERROR: No cards to move"; return 0; }

    my $donor_card = $donor->top_card;

    # To which Stack are we transferring cards?
    my $to = lc( $donor_card->suit("long") );
    $receiver = $Klondike->get_cardset_by_nickname($to);
    die "Unknown suit in sub move_to_foundation!\n" unless $receiver;

    my $allowed       = 0;                     # are we allowed to transfer?
    my $receiver_card = $receiver->top_card;
    if ($receiver_card)
    {
        $allowed = ( $receiver_card->value == $donor_card->value - 1 );
    }
    else
    {                                          # empty foundation
        $allowed = $donor_card->name("long") eq "Ace";
    }

    unless ($allowed) { $Error = "ERROR: Illegal move"; return 0; }

    # Now actually transfer the card
    $donor->give_cards( $receiver, 1 );

    $score += 10;

    # After removing a card from a column, make sure the next card in
    # that column is face up
    my $a;
    if ( $from =~ /\d/ && ( $a = $donor->top_card ) ) {
        $score += 5;
        $a->face_up;
    }

    return 1;
}    # end sub move_to_foundation

# Try to place all remaining cards on the foundation
sub Finish
{
    if ( $Stock->size )
    {
        $Error = "ERROR: Stock must be empty to finish";
        return;
    }
    foreach my $col (@Tableau)
    {
        if ( grep { $_->is_face_down } @{ $col->cards } )
        {
            $Error = "ERROR: All cards must be face up to finish";
            return;
        }
    }

    my $did_move;
    do
    {
        $did_move = 0;
        foreach my $j ( 1 .. @Tableau, "w" )
        {
            if ( move_to_foundation($j) )
            {
                $did_move = 1;
                $Undo->end_move;
                $Error = "";
            }
        }
        print_game();
        sleep(1);
        check_win();
    } while $did_move == 1;

    # If we got here, we didn't win
    $Error = "ERROR: Unable to finish\n";
}    # end sub Finish


sub check_win
{
    my $a;

    if ( ( grep { $a = $_->top_card and $a->name("long") eq "King" } ( values %Foundations ) ) == 4 )
    {
        print "You have won!\n";

        open my $fh, '>>', $stats_file or die "Can't write to $stats_file: $!";
        print $fh scalar( gmtime time ), " - win - $score\n";
        close $fh or die "Can't close $stats_file: $!";

        if ( New_Game_Prompt() )
        {
            New_Game();
        }
        else
        {
            exit;
        }
    }
}

######################################################################
# Game actions other than moving cards around
# Returns true if you should start a new game
sub New_Game_Prompt
{
    print "Start a new game? (y/n): ";
    my $a = <STDIN>;

    if ($a =~ /^\s*y/i)
    {
        update_stats();
        return 1;
    }
    else
    {
        return 0;
    }
}


sub New_Game
{
    my $restart = shift;
    die "setup_game called with unknown arg $restart\n"
        if defined $restart
        && $restart ne "restart";

    # Create new deck
    setup_game($restart);

    my %stats;
    $stats{win}  = 0;
    $stats{lose} = 0;
    open my $fh, '<', $stats_file or die "Can't read $stats_file: $!";
    while ( my $line = readline($fh) )
    {
        chomp $line;
        my ( undef, $status ) = split /\s+-\s+/, $line, 2;
        $stats{$status}++;
    }
    close $fh or die "Can't close $stats_file: $!";
    printf "\nWin/Lose: %d/%d = %.4f", $stats{win}, $stats{lose}, ($stats{lose} == 0 ? 0 : $stats{win} / $stats{lose});

    $score = 0;
}


sub Undo
{
    if ( $Undo->undo )
    {
        # if no error, make sure to erase any existing error message (like
        # "can't redo any more")
        $Error = "";
    }
    else
    {
        $Error = "ERROR: Can't undo any more";
    }
}


sub Redo
{
    if ( $Undo->redo )
    {
        # if no error, make sure to erase any existing error message (like
        # "can't redo any more")
        $Error = "";
    }
    else
    {
        $Error = "ERROR: Can't redo any more";
    }
}


sub Help
{
    my $Usage = <<"ENDUSAGE";
  $0 - play "klondike", aka standard solitaire

  - Columns are 1 to 7, plus the Waste pile, Foundations and Stock

  - Try to build piles of Ace through King of each suit in the Foundations.

  - You can move the top card from the Waste pile onto the
  corresponding Foundation pile or onto another column. Alternatively, you
  can move all, some, or one of the cards in a column onto another column.

  - You can move a card onto the next highest card of a different color, so,
  e.g. a red ten can go on a black Jack. Only a King can be moved onto an
  empty column.

  - Take cards 3 at a time from the Stock into the Waste pile.

  - Commands are one or two letters or numbers (from 1 to 7)

    23 moves one or more cards from column 2 to 3
    2f moves a card from column 2 to the foundation pile of the right suit
    wf moves a card from the waste pile to the foundation pile of the right suit
    w2 moves a card from the waste pile to column 2
    ws moves the whole waste pile back into the stock
    sw (or just s) moves from the stockpile to the waste pile
    z attempts to finish the game. The stock must be empty.

    u  undo last move (multiple undo/redo works)
    r  redo the last move you undid
    o  start the game Over with the same deck
    n  start a new game with a new deck

    q  quits
    h  prints this help
ENDUSAGE

    print $Usage;
    print "\nType RETURN to continue\n";
    <STDIN>;
}    # end sub Help


sub Quit
{
    print "Are you sure you want to quit? (y/n): ";
    my $a = <STDIN>;
    if ( $a !~ /^\s*n/i )
    {
        update_stats();

        print "Bye!\n";
        exit;
    }
}

######################################################################
# TUI stuff
sub print_columns
{
    # print the columns in rows (2-D display)
    # args are a list of CardSets
    my @columns = @_;

    # Print from bottom to top...
    my $index = ( sort { $a <=> $b } ( map { $_->size } @columns ) )[-1] - 1;
    print " ", join( "     ", ( 1 .. @columns ) ), "\n";
    print join( "   ", ("---") x @columns ), "\n";
    foreach ( 0 .. $index )
    {
        my $to_print = "";
        foreach my $column (@columns)
        {
            my $a = ${ $column->cards }[$_];
            my $p = defined $a ? $a->print("short") : "    ";
            $to_print .= "$p  ";
        }    # end loop over one row of each column
        print "$to_print\n";
    }    # end loop over all rows
    print "\n";
}    # end sub print_columns


sub print_game
{
    # print out the current status in solitaire
    print "\n\n", "-" x 55, "\n";
    print "Stock: ", "*" x $Stock->size, "\n";
    print $Waste->print("short"), "\n";
    print "Foundations:   ";
    foreach ( keys %Foundations )
    {
        my $set = $Foundations{ $_ };
        my $to_print = $set->size
            ? $set->top_card->print("short")
            : "(none)";
        print "$to_print   ";
    }
    print "\n\n";

    print_columns(@Tableau);

    print "Score: $score\n\n";
}    # end sub print_game


sub update_stats
{
    my $x;
    if ( ( grep { $x = $_->top_card and $x->name("long") eq "King" } ( values %Foundations ) ) != 4 )
    {
        open my $fh, '>>', $stats_file or die "Can't write to $stats_file: $!";
        print $fh scalar( gmtime time ), " - lose - $score\n";
        close $fh or die "Can't close $stats_file: $!";
    }
}
