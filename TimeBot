#!/usr/bin/env perl
use strict;
use warnings;

package TimeBot;
use base qw(Bot::BasicBot);

use Date::Manip;
use DateTime;
use DateTime::Format::DateParse;

sub help {
    my $self      = shift;
    my $arguments = shift;

    $self->say(
        channel => $arguments->{channel},
        body    => 'source|now|localtime $stamp|dow $stamp|diff $stamp $stamp|{add,sub}_{years,months,days} $offset $stamp',
    );
}

sub said {
    my $self      = shift;
    my $arguments = shift;

    my $body = '?';

    my $re = qr/(\S+(?:\s+[\d:]+['"])?)/;
    my $format = '%Y-%m-%dT%H:%M:%S';

    if ( $arguments->{address} ) {
        # Return the source code link
        if ( $arguments->{body} =~ /^source$/ ) {
            $body = 'https://github.com/ology/Miscellaneous/blob/master/TimeBot';
        }
        # Return the current time
        elsif ( $arguments->{body} =~ /^now$/ ) {
            $body = DateTime->now( time_zone => 'local' );
        }
        # Return the localtime string of a given timestamp
        elsif ( $arguments->{body} =~ /^localtime $re$/ ) {
            my $capture = capture($1);

            $body = scalar( localtime UnixDate( $capture, '%s') );
        }
        # Return the day of the week of a given timestamp
        elsif ( $arguments->{body} =~ /^dow $re$/ ) {
            my $capture = capture($1);

            my $dt = to_dt( $capture, $format );

            $body = $dt->day_name;
        }
        # Return the difference between two given timestamps
        elsif ( $arguments->{body} =~ /^diff $re $re$/ ) {
            my $capture1 = capture($1);
            my $capture2 = capture($2);

            my $dt1 = to_dt( $capture1, $format );
            my $dt2 = to_dt( $capture2, $format );

            $body = sprintf '%.2fd or %dh %dm %ds',
                $dt1->delta_ms($dt2)->hours / 24 + $dt1->delta_ms($dt2)->minutes / 1440 + $dt1->delta_ms($dt2)->seconds / 86400,
                $dt1->delta_ms($dt2)->hours,
                $dt1->delta_ms($dt2)->minutes,
                $dt1->delta_ms($dt2)->seconds;
        }
        # Return the addition or subtraction of the given span and offset from the given timestamp
        elsif ( $arguments->{body} =~ /^([a-zA-Z]+)_([a-zA-Z]+) (\d+) $re$/ ) {
            my $method = $1;
            my $span = $2;

            $method = 'subtract' if $method eq 'sub';

            my $capture = capture($4);

            my $dt = to_dt( $capture, $format );

            $body = $dt->$method( $span => $3 );
        }

        $self->say(
            channel => $arguments->{channel},
            body    => $body,
        );
     
#        $self->shutdown('I have done my job here.');
    }
}

sub capture {
    my ($string) = @_;
    $string =~ s/['"]//g;
    return $string;
}

sub to_dt {
    my( $capture, $format ) = @_;
    my $stamp = UnixDate( $capture, $format );
    my $dt = DateTime::Format::DateParse->parse_datetime($stamp);
    return $dt;
}

package main;

my $bot = TimeBot->new(
    server      => 'irc.perl.org',
    port        => '6667',
    channels    => ['#bottest'],
    nick        => 'TimeBot',
    name        => 'Gene Boggs Bot',
    ignore_list => [],
);

$bot->run();
