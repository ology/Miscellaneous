#!/usr/bin/env perl
use strict;
use warnings;

use Capture::Tiny qw(capture);
use JSON::MaybeXS qw(decode_json);
use Try::Tiny qw(try catch);

my $list_id = shift || die "Usage: perl $0 abcdefg01234567";

my @cmd = (qw(youtube-dl -i -v -j --flat-playlist --skip-download), $list_id);
my ($stdout) = capture { system @cmd };

my @lines = split /\n/, $stdout;
my $json = '[' . join(',', @lines) . ']';
$json =~ s/\bnull\b/"null"/g;
my $data = decode_json($json);

my $retries = 0;
my $retrying;

my $total = @$data;
my $i = 0;

for my $track (@$data) {
  my $video = $track->{url};

  unless ($retries <= 1 && $retrying && $retrying eq $video) {
    $retries  = 0;
    $retrying = undef;

    $i++;

    my $file = sprintf '%s-%s.mp3', $track->{title}, $track->{url};
    if (-e $file) {
      warn "$i. Track already exists. Skipping: $file\n";
      next;
    }
  }

  print "$i of $total downloading $video\n";

  my @cmd = (qw(youtube-dl -x --audio-format mp3), $video);
  try {
    system(@cmd) == 0 or die "system @cmd failed: $?";
  }
  catch {
    warn "Error: $_\n";
    if ($retries <= 0) {
      warn "Retrying...\n";
      $retries++;
      $retrying = $video;
      redo;
    }
  };
}
